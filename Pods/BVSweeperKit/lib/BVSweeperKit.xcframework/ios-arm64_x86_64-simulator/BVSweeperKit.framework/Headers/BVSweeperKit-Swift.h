#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef BVSWEEPERKIT_SWIFT_H
#define BVSWEEPERKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BVSweeperKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSNumber;
@class NSString;

SWIFT_CLASS("_TtC12BVSweeperKit13BVDrawMapRoom")
@interface BVDrawMapRoom : NSObject
@property (nonatomic) NSInteger no;
@property (nonatomic, copy) NSString * _Null_unspecified roomName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIImage;
@class UIColor;

SWIFT_CLASS("_TtC12BVSweeperKit18BVSweeperMapConfig")
@interface BVSweeperMapConfig : NSObject
/// 单例对象
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BVSweeperMapConfig * _Nonnull shared;)
+ (BVSweeperMapConfig * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSInteger maxWallCount;
@property (nonatomic) NSInteger maxForbiddenZoneCount;
@property (nonatomic) NSInteger maxPlanningZoneCount;
@property (nonatomic) NSInteger maxRoomSelectCheckCount;
@property (nonatomic) NSInteger maxRoomCount;
/// 机器人图标
@property (nonatomic, strong) UIImage * _Nullable robotIcon;
/// 充电桩图标
@property (nonatomic, strong) UIImage * _Nullable chargingIcon;
/// 禁区、虚拟墙删除按钮图片
@property (nonatomic, strong) UIImage * _Nullable deleteIcon;
/// 禁区、虚拟墙调整按钮图片
@property (nonatomic, strong) UIImage * _Nullable adjustIcon;
/// 房间标签正常颜色
@property (nonatomic, strong) UIColor * _Nonnull roomLabelNormalColor;
/// 房间标签选中颜色
@property (nonatomic, strong) UIColor * _Nonnull roomLabelSelectColor;
/// 房间正常颜色
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull normalColors;
/// 房间选中颜色
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull selectedColors;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSData;

SWIFT_CLASS("_TtC12BVSweeperKit16BVSweeperMapData")
@interface BVSweeperMapData : NSObject
/// 初始化对象
/// \param data 接收到的地图原始数据
///
///
/// returns:
/// 对象
+ (BVSweeperMapData * _Nullable)modelWithData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum BVSweeperMapViewState : NSInteger;
@protocol BVSweeperMapViewRoomEditDelegate;
enum BVSweeperMapViewMode : NSInteger;
@class NSCoder;

/// // 地图控件
SWIFT_CLASS("_TtC12BVSweeperKit16BVSweeperMapView")
@interface BVSweeperMapView : UIView
/// 地图状态
@property (nonatomic, readonly) enum BVSweeperMapViewState mapState;
/// 分房间时的代理
@property (nonatomic, weak) id <BVSweeperMapViewRoomEditDelegate> _Nullable editRoomDelegate;
/// 地图是否为空
@property (nonatomic, readonly) BOOL isMapEmpty;
- (nonnull instancetype)initWithMode:(enum BVSweeperMapViewMode)mode emptyView:(UIView * _Nonnull)emptyView OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface BVSweeperMapView (SWIFT_EXTENSION(BVSweeperKit))
/// 获取划区
///
/// returns:
/// 当前的划区数据
- (NSArray<NSArray<NSNumber *> *> * _Nonnull)getPlanningZone SWIFT_WARN_UNUSED_RESULT;
/// 添加一个划区
///
/// returns:
/// false代表到达上限
- (BOOL)addPlanningZone SWIFT_WARN_UNUSED_RESULT;
@end


@interface BVSweeperMapView (SWIFT_EXTENSION(BVSweeperKit))
/// 接收地图数据
/// \param data 转化的地图数据模型
///
- (void)reciveMapData:(BVSweeperMapData * _Nonnull)data;
/// 切换地图的状态
- (void)changeState:(enum BVSweeperMapViewState)state;
@end

@class UIScrollView;

@interface BVSweeperMapView (SWIFT_EXTENSION(BVSweeperKit)) <UIScrollViewDelegate>
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
@end



@interface BVSweeperMapView (SWIFT_EXTENSION(BVSweeperKit))
/// 恢复房间选择状态
- (void)resetRoomCheck;
/// 获取选中的房间Id
///
/// returns:
/// 当前选中的房间Id
- (NSArray<NSNumber *> * _Nonnull)getCheckRoomIds SWIFT_WARN_UNUSED_RESULT;
/// 获取选中的房间Model
///
/// returns:
/// 当前选中的房间的具体模型数据
- (NSArray<BVDrawMapRoom *> * _Nonnull)getCheckRooms SWIFT_WARN_UNUSED_RESULT;
/// 是否可以继续划分房间
///
/// returns:
/// false代表当前房间数量到达上限，不能再继续划分
- (BOOL)canSliptRoom SWIFT_WARN_UNUSED_RESULT;
/// 获取分割房间起点
///
/// returns:
/// 分割房间的起点
- (CGPoint)getRoomSplitStartPoint SWIFT_WARN_UNUSED_RESULT;
/// 获取分割房间终点
///
/// returns:
/// 分割房间的终点
- (CGPoint)getRoomSplitEndPoint SWIFT_WARN_UNUSED_RESULT;
@end



@interface BVSweeperMapView (SWIFT_EXTENSION(BVSweeperKit))
/// 恢复禁区、虚拟墙原始数据
- (void)resetRestrictedToOriginal;
/// 添加一个虚拟墙
///
/// returns:
/// false代表已到达上限
- (BOOL)addVirtualWall SWIFT_WARN_UNUSED_RESULT;
/// 添加一个禁区
///
/// returns:
/// false代表已到达上限
- (BOOL)addForbiddenZone SWIFT_WARN_UNUSED_RESULT;
/// 是否可以发送禁区
/// 在发送禁区、虚拟墙前，必须调用此方法检查是否可已发送
///
/// returns:
/// false代表有禁区或者虚拟墙遮挡了机器或充电桩
- (BOOL)canSendVirtualWallAndForbiddenZone SWIFT_WARN_UNUSED_RESULT;
/// 获取禁区
///
/// returns:
/// 当前的禁区数据
- (NSArray<NSArray<NSNumber *> *> * _Nonnull)getForbiddenZone SWIFT_WARN_UNUSED_RESULT;
/// 获取虚拟墙
///
/// returns:
/// 当前的虚拟墙数据
- (NSArray<NSArray<NSNumber *> *> * _Nonnull)getVirtualWall SWIFT_WARN_UNUSED_RESULT;
@end


/// 地图的模式
typedef SWIFT_ENUM(NSInteger, BVSweeperMapViewMode, closed) {
/// 正常模式
  BVSweeperMapViewModeNormalMode = 0,
/// 分享模式
  BVSweeperMapViewModeShareMode = 1,
/// 预览地图
  BVSweeperMapViewModeMapPreviewMode = 2,
/// 分房间模式
  BVSweeperMapViewModeRoomEditMode = 3,
};


/// 分房间时的delegate
SWIFT_PROTOCOL("_TtP12BVSweeperKit32BVSweeperMapViewRoomEditDelegate_")
@protocol BVSweeperMapViewRoomEditDelegate <NSObject>
/// 返回当前选中的房间数量
- (void)mapView:(BVSweeperMapView * _Nonnull)view didCheckRoomCount:(NSInteger)count;
@end

/// 地图当前的状态
typedef SWIFT_ENUM(NSInteger, BVSweeperMapViewState, closed) {
  BVSweeperMapViewStateNormalState = 0,
/// 虚拟墙、禁区编辑状态
  BVSweeperMapViewStateRestricteEditState = 1,
/// 划区清扫状态
  BVSweeperMapViewStatePlanningZoneState = 2,
/// 划区清扫编辑状态
  BVSweeperMapViewStatePlanningZoneEditState = 3,
/// 选区清扫状态
  BVSweeperMapViewStateSelectZoneState = 4,
/// 选区清扫选择状态
  BVSweeperMapViewStateSelectZoneCheckState = 5,
/// 房间编辑状态
  BVSweeperMapViewStateRoomEditState = 6,
/// 房间分割状态
  BVSweeperMapViewStateRoomSplitState = 7,
};



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef BVSWEEPERKIT_SWIFT_H
#define BVSWEEPERKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BVSweeperKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSNumber;
@class NSString;

SWIFT_CLASS("_TtC12BVSweeperKit13BVDrawMapRoom")
@interface BVDrawMapRoom : NSObject
@property (nonatomic) NSInteger no;
@property (nonatomic, copy) NSString * _Null_unspecified roomName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIImage;
@class UIColor;

SWIFT_CLASS("_TtC12BVSweeperKit18BVSweeperMapConfig")
@interface BVSweeperMapConfig : NSObject
/// 单例对象
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BVSweeperMapConfig * _Nonnull shared;)
+ (BVSweeperMapConfig * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSInteger maxWallCount;
@property (nonatomic) NSInteger maxForbiddenZoneCount;
@property (nonatomic) NSInteger maxPlanningZoneCount;
@property (nonatomic) NSInteger maxRoomSelectCheckCount;
@property (nonatomic) NSInteger maxRoomCount;
/// 机器人图标
@property (nonatomic, strong) UIImage * _Nullable robotIcon;
/// 充电桩图标
@property (nonatomic, strong) UIImage * _Nullable chargingIcon;
/// 禁区、虚拟墙删除按钮图片
@property (nonatomic, strong) UIImage * _Nullable deleteIcon;
/// 禁区、虚拟墙调整按钮图片
@property (nonatomic, strong) UIImage * _Nullable adjustIcon;
/// 房间标签正常颜色
@property (nonatomic, strong) UIColor * _Nonnull roomLabelNormalColor;
/// 房间标签选中颜色
@property (nonatomic, strong) UIColor * _Nonnull roomLabelSelectColor;
/// 房间正常颜色
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull normalColors;
/// 房间选中颜色
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull selectedColors;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSData;

SWIFT_CLASS("_TtC12BVSweeperKit16BVSweeperMapData")
@interface BVSweeperMapData : NSObject
/// 初始化对象
/// \param data 接收到的地图原始数据
///
///
/// returns:
/// 对象
+ (BVSweeperMapData * _Nullable)modelWithData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum BVSweeperMapViewState : NSInteger;
@protocol BVSweeperMapViewRoomEditDelegate;
enum BVSweeperMapViewMode : NSInteger;
@class NSCoder;

/// // 地图控件
SWIFT_CLASS("_TtC12BVSweeperKit16BVSweeperMapView")
@interface BVSweeperMapView : UIView
/// 地图状态
@property (nonatomic, readonly) enum BVSweeperMapViewState mapState;
/// 分房间时的代理
@property (nonatomic, weak) id <BVSweeperMapViewRoomEditDelegate> _Nullable editRoomDelegate;
/// 地图是否为空
@property (nonatomic, readonly) BOOL isMapEmpty;
- (nonnull instancetype)initWithMode:(enum BVSweeperMapViewMode)mode emptyView:(UIView * _Nonnull)emptyView OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface BVSweeperMapView (SWIFT_EXTENSION(BVSweeperKit))
/// 获取划区
///
/// returns:
/// 当前的划区数据
- (NSArray<NSArray<NSNumber *> *> * _Nonnull)getPlanningZone SWIFT_WARN_UNUSED_RESULT;
/// 添加一个划区
///
/// returns:
/// false代表到达上限
- (BOOL)addPlanningZone SWIFT_WARN_UNUSED_RESULT;
@end


@interface BVSweeperMapView (SWIFT_EXTENSION(BVSweeperKit))
/// 接收地图数据
/// \param data 转化的地图数据模型
///
- (void)reciveMapData:(BVSweeperMapData * _Nonnull)data;
/// 切换地图的状态
- (void)changeState:(enum BVSweeperMapViewState)state;
@end

@class UIScrollView;

@interface BVSweeperMapView (SWIFT_EXTENSION(BVSweeperKit)) <UIScrollViewDelegate>
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
@end



@interface BVSweeperMapView (SWIFT_EXTENSION(BVSweeperKit))
/// 恢复房间选择状态
- (void)resetRoomCheck;
/// 获取选中的房间Id
///
/// returns:
/// 当前选中的房间Id
- (NSArray<NSNumber *> * _Nonnull)getCheckRoomIds SWIFT_WARN_UNUSED_RESULT;
/// 获取选中的房间Model
///
/// returns:
/// 当前选中的房间的具体模型数据
- (NSArray<BVDrawMapRoom *> * _Nonnull)getCheckRooms SWIFT_WARN_UNUSED_RESULT;
/// 是否可以继续划分房间
///
/// returns:
/// false代表当前房间数量到达上限，不能再继续划分
- (BOOL)canSliptRoom SWIFT_WARN_UNUSED_RESULT;
/// 获取分割房间起点
///
/// returns:
/// 分割房间的起点
- (CGPoint)getRoomSplitStartPoint SWIFT_WARN_UNUSED_RESULT;
/// 获取分割房间终点
///
/// returns:
/// 分割房间的终点
- (CGPoint)getRoomSplitEndPoint SWIFT_WARN_UNUSED_RESULT;
@end



@interface BVSweeperMapView (SWIFT_EXTENSION(BVSweeperKit))
/// 恢复禁区、虚拟墙原始数据
- (void)resetRestrictedToOriginal;
/// 添加一个虚拟墙
///
/// returns:
/// false代表已到达上限
- (BOOL)addVirtualWall SWIFT_WARN_UNUSED_RESULT;
/// 添加一个禁区
///
/// returns:
/// false代表已到达上限
- (BOOL)addForbiddenZone SWIFT_WARN_UNUSED_RESULT;
/// 是否可以发送禁区
/// 在发送禁区、虚拟墙前，必须调用此方法检查是否可已发送
///
/// returns:
/// false代表有禁区或者虚拟墙遮挡了机器或充电桩
- (BOOL)canSendVirtualWallAndForbiddenZone SWIFT_WARN_UNUSED_RESULT;
/// 获取禁区
///
/// returns:
/// 当前的禁区数据
- (NSArray<NSArray<NSNumber *> *> * _Nonnull)getForbiddenZone SWIFT_WARN_UNUSED_RESULT;
/// 获取虚拟墙
///
/// returns:
/// 当前的虚拟墙数据
- (NSArray<NSArray<NSNumber *> *> * _Nonnull)getVirtualWall SWIFT_WARN_UNUSED_RESULT;
@end


/// 地图的模式
typedef SWIFT_ENUM(NSInteger, BVSweeperMapViewMode, closed) {
/// 正常模式
  BVSweeperMapViewModeNormalMode = 0,
/// 分享模式
  BVSweeperMapViewModeShareMode = 1,
/// 预览地图
  BVSweeperMapViewModeMapPreviewMode = 2,
/// 分房间模式
  BVSweeperMapViewModeRoomEditMode = 3,
};


/// 分房间时的delegate
SWIFT_PROTOCOL("_TtP12BVSweeperKit32BVSweeperMapViewRoomEditDelegate_")
@protocol BVSweeperMapViewRoomEditDelegate <NSObject>
/// 返回当前选中的房间数量
- (void)mapView:(BVSweeperMapView * _Nonnull)view didCheckRoomCount:(NSInteger)count;
@end

/// 地图当前的状态
typedef SWIFT_ENUM(NSInteger, BVSweeperMapViewState, closed) {
  BVSweeperMapViewStateNormalState = 0,
/// 虚拟墙、禁区编辑状态
  BVSweeperMapViewStateRestricteEditState = 1,
/// 划区清扫状态
  BVSweeperMapViewStatePlanningZoneState = 2,
/// 划区清扫编辑状态
  BVSweeperMapViewStatePlanningZoneEditState = 3,
/// 选区清扫状态
  BVSweeperMapViewStateSelectZoneState = 4,
/// 选区清扫选择状态
  BVSweeperMapViewStateSelectZoneCheckState = 5,
/// 房间编辑状态
  BVSweeperMapViewStateRoomEditState = 6,
/// 房间分割状态
  BVSweeperMapViewStateRoomSplitState = 7,
};



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
